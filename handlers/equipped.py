import datetime
import pprint
import bson
from math import ceil
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, FSInputFile, BufferedInputFile, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot import bot
from db.db_requests import Db
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.fsm.storage.memory import MemoryStorage
import os
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton)

from equipment_image_creator.equipment_image_creator import create_image

router = Router()

storage = MemoryStorage()


@router.message(F.text == 'üî´–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ')
async def handler_hero_equipped(message: Message, state: FSMContext, is_edit = False):
    #loader = await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞...')
    hero = await Db.get_hero_by_telegram_id(telegram_id=message.chat.id)
    
    
    dict_equipment_types = {
        'üî´ –æ–≥–Ω–µ—Å—Ç—Ä–µ–ª—å–Ω–æ–µ' : 'gun_1',
        '‚òÑÔ∏è –ø–∞—Ç—Ä–æ–Ω—ã' : 'patrons',
        'ü™ì —Ö–æ–ª–æ–¥–Ω–æ–µ' : 'cold_gun_1',
        'üíâ —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä—ã' : 'pocket',
        'ü¶∫ –±—Ä–æ–Ω—è' : 'armor',
        'ü™ñ —à–ª–µ–º': 'helmet'
    }
    equipment_count = {
        "gun_1" : 0,
        "patrons" : 0,
        "cold_gun_1" : 0,
        "pocket" : 0,
        "armor" : 0,
        "helmet" : 0
    }
    
    
    for gun_type in dict_equipment_types:
        count = await Db.get_player_equipments(hero['_id'], gun_type)
        equipment_count[dict_equipment_types[gun_type]] = len(count)
        
    gun_1_text = f'({equipment_count["gun_1"]})'
    gun_2_text = f'({equipment_count["gun_1"]})'
    patrons_text = f'({equipment_count["patrons"]})'
    cold_gun_1_text = f'({equipment_count["cold_gun_1"]})'
    pocket_text = f'({equipment_count["pocket"]})'
    armor_text = f'({equipment_count["armor"]})'
    helmet_text = f'({equipment_count["helmet"]})'
 
    kb = [
        [InlineKeyboardButton(text=f'üî´–û—Å–Ω–æ–≤–Ω–æ–µ –æ—Ä—É–∂–∏–µ {gun_1_text}', callback_data='equipped:gun_1'),
        InlineKeyboardButton(text=f'üî´–ó–∞–ø–∞—Å–Ω–æ–µ –æ—Ä—É–∂–∏–µ {gun_2_text}', callback_data='equipped:gun_2')],
        [InlineKeyboardButton(text=f'üî™–•–æ–ª–æ–¥–Ω–æ–µ –æ—Ä—É–∂–∏–µ {cold_gun_1_text}', callback_data='equipped:cold_gun_1'),
        InlineKeyboardButton(text=f'‚òÑÔ∏è–ü–∞—Ç—Ä–æ–Ω—ã {patrons_text}', callback_data='equipped:patrons')],
        [InlineKeyboardButton(text=f'ü¶∫–¢–µ–ª–æ {armor_text}', callback_data='equipped:armor'),
         InlineKeyboardButton(text=f'ü™ñ–ì–æ–ª–æ–≤–∞ {helmet_text}', callback_data='equipped:helmet')],
        [InlineKeyboardButton(text=f'üíº–ü–æ–¥—Å—É–º–æ–∫ {pocket_text}', callback_data='equipped:pocket')]
    ]
    image = create_image(hero['equipped'])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    if is_edit:
        await message.edit_media(InputMediaPhoto(media=BufferedInputFile(image.read(), "image.png"), caption='–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ'), reply_markup=keyboard)
    
    else:
        await message.answer_photo(BufferedInputFile(image.read(), "image.png"),
                                   caption='–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ',
                                   reply_markup=keyboard)
    #await bot.delete_message(chat_id=loader.chat.id, message_id=loader.message_id)


@router.callback_query(F.data == 'üî´–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ')
async def handler_hero_equipped_callback(callback: CallbackQuery, state: FSMContext):

    await handler_hero_equipped(callback.message, state, True)


@router.callback_query(F.data.startswith('equipped:'))
async def handler_hero_equipped_data_callback(callback: CallbackQuery, state: FSMContext, equipped_type_callback=''):
    dict_equipment_types = {
        'gun_1' : 'üî´ –æ–≥–Ω–µ—Å—Ç—Ä–µ–ª—å–Ω–æ–µ',
        'gun_2' : 'üî´ –æ–≥–Ω–µ—Å—Ç—Ä–µ–ª—å–Ω–æ–µ',
        'patrons' : '‚òÑÔ∏è –ø–∞—Ç—Ä–æ–Ω—ã',
        'cold_gun_1' : 'ü™ì —Ö–æ–ª–æ–¥–Ω–æ–µ',
        'pocket' : 'üíâ —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä—ã',
        'armor' : 'ü¶∫ –±—Ä–æ–Ω—è',
        'helmet' : 'ü™ñ —à–ª–µ–º'
    }
    
    if equipped_type_callback:
        equipped_type = equipped_type_callback
    else:
        equipped_type = callback.data.split(':')[1]
        
    page = 1
    
    if len(callback.data.split(':')) > 2:
        page = int(callback.data.split(':')[2])
    
    equipped_type_text = ''
    if equipped_type == 'gun_1':
        equipped_type_text = 'üî´–û—Å–Ω–æ–≤–Ω–æ–µ –æ—Ä—É–∂–∏–µ'
    elif equipped_type == 'gun_2':
        equipped_type_text = 'üî´–ó–∞–ø–∞—Å–Ω–æ–µ –æ—Ä—É–∂–∏–µ'
    elif equipped_type == 'patrons':
        equipped_type_text = '‚òÑÔ∏è–ü–∞—Ç—Ä–æ–Ω—ã'
    elif equipped_type == 'cold_gun_1':
        equipped_type_text = 'üî™–•–æ–ª–æ–¥–Ω–æ–µ –æ—Ä—É–∂–∏–µ'
    elif equipped_type == 'pocket':
        equipped_type_text = 'üíº–ü–æ–¥—Å—É–º–æ–∫'
    elif equipped_type == 'armor':
        equipped_type_text = 'ü¶∫–¢–µ–ª–æ'
    elif equipped_type == 'helmet':
        equipped_type_text = 'ü™ñ–ì–æ–ª–æ–≤–∞'
        
    hero = await Db.get_hero_by_telegram_id(telegram_id=callback.from_user.id)
    
    hero_equipments = await Db.get_player_equipments(hero['_id'], dict_equipment_types[equipped_type])

    kb = []
    amount = 0
    
    max_page = ceil(len(hero_equipments) / 10)
    
    current_idx = (page - 1) * 10

    if current_idx + 10 < max_page * 10:
        max_page_idx = current_idx + 10
    else:
        max_page_idx = len(hero_equipments)

    change_page_button = []
    
    if page > 1:
        change_page_button.append(InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=f'equipped:{equipped_type}:{page - 1}'))
    if page < max_page:
        change_page_button.append(InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data=f'equipped:{equipped_type}:{page + 1}'))

    for equipment in hero_equipments[current_idx:max_page_idx]:
        if hero.get('equipped').get(equipped_type) != None:
            if str(equipment['_id']) == str(hero.get('equipped').get(equipped_type)):
                is_equipped = '‚úÖ'
                if equipment["equipments"].get("type") == "‚òÑÔ∏è –ø–∞—Ç—Ä–æ–Ω—ã":
                    kb.append([InlineKeyboardButton(text=f'{is_equipped} {equipment["equipments"].get("name")} ({equipment.get("count")})', callback_data=f'get_equipped:{str(equipment.get("_id"))}:{equipped_type}:0')])
                else:
                    kb.append([InlineKeyboardButton(text=f'{is_equipped} {equipment["equipments"].get("name")} ({equipment.get("solidity_free")}/{equipment["equipments"].get("solidity")})', callback_data=f'get_equipped:{str(equipment.get("_id"))}:{equipped_type}:0')])
                amount += 1
                continue
                
        if str(equipment['_id']) == str(hero.get('equipped').get("gun_1")) or str(equipment['_id']) == str(hero.get('equipped').get("gun_2")):
            continue

        is_equipped = '‚ùå'
        if equipment["equipments"].get("type") == "‚òÑÔ∏è –ø–∞—Ç—Ä–æ–Ω—ã":
            kb.append([InlineKeyboardButton(text=f'{is_equipped} {equipment["equipments"].get("name")} ({equipment.get("count")})', callback_data=f'get_equipped:{str(equipment.get("_id"))}:{equipped_type}:1')])
        else:
            kb.append([InlineKeyboardButton(text=f'{is_equipped} {equipment["equipments"].get("name")} ({equipment.get("solidity_free")}/{equipment["equipments"].get("solidity")})', callback_data=f'get_equipped:{str(equipment.get("_id"))}:{equipped_type}:1')])
                
        amount += 1
    
    if len(change_page_button) > 0:
        kb.append(change_page_button)
        
    kb.append([InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='üî´–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ')])
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    if amount > 0:
        await callback.message.edit_caption(caption=f'{equipped_type_text} - —Ç–µ–∫—É—â–µ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ', reply_markup=keyboard)
    else:
        await callback.message.edit_caption(caption=f'{equipped_type_text} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ', reply_markup=keyboard)
    #await bot.delete_message(chat_id=loader.chat.id, message_id=loader.message_id)
    # else:
    #     print(2)
    #     kb = [[InlineKeyboardButton(text=f'‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='üî´–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ')]]
    #     keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    #     await callback.message.answer_photo(FSInputFile('./images/start_location.png'),
    #                                         caption=f'{equipped_type_text} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ',
    #                                         reply_markup=keyboard)


@router.callback_query(F.data.startswith('set_equipped:'))
async def handler_set_equipped(callback: CallbackQuery, state: FSMContext):
    #loader = await callback.message.answer('–ó–∞–≥—Ä—É–∑–∫–∞...')
    equipped_id = callback.data.split(':')[-1]
    equipped_type = callback.data.split(':')[-2]
    hero = await Db.get_hero_by_telegram_id(telegram_id=callback.from_user.id)
    hero['equipped'][equipped_type] = bson.ObjectId(equipped_id)
    await Db.update_hero(hero['_id'], hero)
    
    callback_data = f"get_equipped:{equipped_id}:{equipped_type}:0"
    await handler_get_equipped(callback, state, callback_data)



@router.callback_query(F.data.startswith('unset_equipped:'))
async def handler_unset_equipped(callback: CallbackQuery, state: FSMContext):
    equipped_id = callback.data.split(':')[-1]
    equipped_type = callback.data.split(':')[-2]
    hero = await Db.get_hero_by_telegram_id(telegram_id=callback.from_user.id)
    hero['equipped'][equipped_type] = {}
    await Db.update_hero(hero['_id'], hero)
    callback_data = f"get_equipped:{equipped_id}:{equipped_type}:1"
    await handler_get_equipped(callback, state, callback_data)
    
    
@router.callback_query(F.data.startswith('delete_equipment:'))
async def handler_unset_equipped(callback: CallbackQuery, state: FSMContext):
    equipped_id = callback.data.split(':')[-1]
    equipped_type = callback.data.split(':')[-2]
    hero = await Db.get_hero_by_telegram_id(telegram_id=callback.from_user.id)
    if str(hero['equipped'][equipped_type]) == str(equipped_id):
        hero['equipped'][equipped_type] = {}
        await Db.update_hero(hero['_id'], hero)
    
    await Db.delete_player_equipments(equipped_id)
    await handler_hero_equipped(callback.message, state, True)

    
@router.callback_query(F.data.startswith('get_equipped:'))
async def handler_get_equipped(callback: CallbackQuery, state: FSMContext, callback_data = None):
    #loader = await callback.message.answer('–ó–∞–≥—Ä—É–∑–∫–∞...')
    if not callback_data:
        callback_data = callback.data
        
    equipped_id = callback_data.split(':')[-3]
    equipped_type = callback_data.split(':')[-2]
    equipped_status = int(callback_data.split(':')[-1])
    
    hero = await Db.get_hero_by_telegram_id(telegram_id=callback.message.chat.id)
    
    equipment = await Db.get_player_equipments(hero['_id'], equipment_id  = equipped_id)
    
    equipment = equipment[0]
    
    
    
    text = f"<b>{equipment['equipments']['name']}\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n–£—Ä–æ–≤–µ–Ω—å - üî∑ {equipment['equipments']['level']}"
    
    if equipment['equipments']['strenght'] != None:
        text += "\nüèãÔ∏è–°–∏–ª–∞ - " + str(equipment['equipments']['strenght'])
    if equipment['equipments']['endurance'] != None:
        text += "\nüèÉ–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å - " + str(equipment['equipments']['endurance'])
    if equipment['equipments']['dexterity'] != None:
        text += "\nü§∏–õ–æ–≤–∫–æ—Å—Ç—å - " + str(equipment['equipments']['dexterity'])
    if equipment['equipments']['accuracy'] != None:
        text += "\nü§∫–ú–µ—Ç–∫–æ—Å—Ç—å - " + str(equipment['equipments']['accuracy'])
    if equipment['equipments']['luck'] != None:
        text += "\nüèåÔ∏è–£–¥–∞—á–∞ - " + str(equipment['equipments']['luck'])
        
    text += "\n\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:"
    
    if equipment['equipments']['type'] == "üî´ –æ–≥–Ω–µ—Å—Ç—Ä–µ–ª—å–Ω–æ–µ" or equipment['equipments']['type'] == "ü™ì —Ö–æ–ª–æ–¥–Ω–æ–µ":
        text += "\n‚òÑÔ∏è–£—Ä–æ–Ω - " + str(equipment['equipments']['weaponDamage'])
        if equipment['equipments']['type'] == "üî´ –æ–≥–Ω–µ—Å—Ç—Ä–µ–ª—å–Ω–æ–µ":
            text += "\n‚ÜîÔ∏è–î–∏—Å—Ç–∞–Ω—Ü–∏—è - " + str(equipment['equipments']['distanceModifier'])
        text += "\nüí•–ö—Ä–∏—Ç - " + str(equipment['equipments']['criticalDamagePower'])
        
    elif equipment['equipments']['type'] == "ü¶∫ –±—Ä–æ–Ω—è" or equipment['equipments']['type'] == "ü™ñ —à–ª–µ–º" or equipment['equipments']['type'] == "üíâ —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä—ã":
        text += "\nüõ°–ë—Ä–æ–Ω—è - " + str(equipment['equipments']['armor'])
    
    criticalDamageProbability = None
    
    if equipment['equipments']['type'] == "üî´ –æ–≥–Ω–µ—Å—Ç—Ä–µ–ª—å–Ω–æ–µ" or equipment['equipments']['type'] == "ü™ì —Ö–æ–ª–æ–¥–Ω–æ–µ":
        criticalDamageProbability = "–Ω–∏–∑–∫–∏–π"
        if equipment['equipments']['criticalDamageProbability'] > 50 and equipment['equipments']['criticalDamageProbability'] <= 100:
            criticalDamageProbability = "—Å—Ä–µ–¥–Ω–∏–π"
        elif equipment['equipments']['criticalDamageProbability'] > 100:
            criticalDamageProbability = "–≤—ã—Å–æ–∫–∏–π"
            
    elif equipment['equipments']['type'] == "üíâ —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä":
        criticalDamageProbability = "–ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–π"
        if equipment['equipments']['criticalDamageProbability'] >= 0:
            criticalDamageProbability = "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π"
            
    if criticalDamageProbability:
        text += "\nüé≤–®–∞–Ω—Å –∫—Ä–∏—Ç–∞ - " + criticalDamageProbability


    if equipment['equipments']['type'] != "üíâ —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä" and equipment['equipments']['type'] != "‚òÑÔ∏è –ø–∞—Ç—Ä–æ–Ω—ã":
        text += f"\n\n‚öôÔ∏è {equipment['solidity_free']}/{equipment['equipments']['solidity']}"
        
    if equipment['equipments']['type'] == "‚òÑÔ∏è –ø–∞—Ç—Ä–æ–Ω—ã":
        text += f"\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {equipment['count']}"
        
    text += "</b>"
    
    
    kb = []
    
    if equipped_status == 1:
        kb.append([InlineKeyboardButton(text=f'–≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'set_equipped:{equipped_type}:{str(equipment.get("_id"))}')])
    else:
        kb.append([InlineKeyboardButton(text=f'–°–Ω—è—Ç—å', callback_data=f'unset_equipped:{equipped_type}:{str(equipment.get("_id"))}')])
    kb.append([InlineKeyboardButton(text=f'–£–ª—É—á—à–∏—Ç—å', callback_data='upgrade_equipment')])
    kb.append([InlineKeyboardButton(text=f'–í—ã–∫–∏–Ω—É—Ç—å', callback_data=f'delete_equipment:{equipped_type}:{str(equipment.get("_id"))}')])
    kb.append([InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='üî´–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ')])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    


    image = create_image(hero['equipped'])
    await callback.message.edit_media(InputMediaPhoto(media=BufferedInputFile(image.read(), "image.png"), caption=text, parse_mode = "html"), reply_markup=keyboard)
    
    
    #await handler_hero_equipped_data_callback(callback=callback, state=state, equipped_type_callback=equipped_type)
